name: Build and Test Cfg-Mgmt
run-name: Building and testing cfg-mgmt
on:
  workflow_call:
    inputs:
      release:
        required: false
        type: boolean
        default: false
      version-operation:
        required: true
        type: string
        description: |
          version-operation to pass to `version` action (cannot validate allowed values here)
          one of:
          - noop
          - finalise
          - commit-digest-as-prerelease
          - timestamp-as-prerelease
          - bump-major
          - bump-minor
          - bump-patch
      version-commit-message:
        required: false
        type: string
        default: "build ${version}"

    outputs:
      version-commit-objects:
        description: commit-objects (for importing commit changing to effective version)
        value: ${{ jobs.version.outputs.commit-objects }}
      version-commit-digest:
        description: commit-digest for version-commit
        value: ${{ jobs.version.outputs.commit-digest }}
      effective-version:
        description: effective version used during build
        value: ${{ jobs.version.outputs.version }}
      component-descriptor:
        description: |
          the OCM Component-Descriptor in YAML-format (referenced inline-blobs and resources
          are guaranteed to already have been published)
        value: ${{ jobs.component-descriptor.outputs.component-descriptor }}

jobs:
  params:
    runs-on: ubuntu-latest
    outputs:
      oci_repository: ${{ steps.params.outputs.oci_repository }}
      oci_platforms: ${{ steps.params.outputs.oci_platforms }}
    steps:
      - name: params
        id: params
        run: |
          set -eu
          set -o pipefail

          is_fork=$(
            curl -qL -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }} \
            | jq .fork
          )
          echo "repo is a fork: ${is_fork}"

          if [ "${is_fork}" == true ]; then
            # avoid interference w/ images or component-descriptors from forked repositories
            # (also: do not require forks to have permissions for gardener's registries)
            repo_base=ghcr.io/${{ github.repository }}
          elif [ "${is_fork}" == false ]; then
            repo_base=europe-docker.pkg.dev/gardener-project
          else
            echo "unexpected value for is_fork: ${is_fork}"
            exit 1
          fi

          snapshots_repo="${repo_base}/snapshots"
          releases_repo="${repo_base}/releases"

          if ${{ inputs.release || false }}; then
            oci_repository=${releases_repo}
          else
            oci_repository=${snapshots_repo}
          fi

          echo "oci_repository=${oci_repository}"
          echo "oci_repository=${oci_repository}" >> "${GITHUB_OUTPUT}"
          echo "oci_platforms=linux/amd64,linux/arm64" >> "${GITHUB_OUTPUT}"

  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      setuptools-version: ${{ steps.version-setuptools.outputs.setuptools-version }}
      commit-objects: ${{ steps.version.outputs.commit-objects }}
      commit-digest: ${{ steps.version.outputs.commit-digest }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/version
      id: version
      with:
        read-callback: .ci/read-version-cfg-mgmt
        write-callback: .ci/write-version-cfg-mgmt
        commit-message: ${{ inputs.version-commit-message }}
        version-operation: ${{ inputs.version-operation }}
        repository-operation: capture-commit
    - name: version-setuptools
      id: version-setuptools
      run: |
        set -eu
        version=${{ steps.version.outputs.version }}
        if [[ "${version}" == *-* ]]; then
          # version was non-final - add suffix compliant w/ pep-440
          version="${version%%-*}-dev0"
        fi
        echo "setuptools-version=${version}" >> ${GITHUB_OUTPUT}

  package:
    runs-on: ubuntu-latest
    environment: build
    outputs:
      ocm_resources: ${{ steps.package.outputs.ocm_resources }}
    needs:
      - version
    container:
      image: python:alpine
    steps:
    - name: Install git, setuptools, node (for upload-artifact)
      run: |
        apk add \
          bash \
          file \
          git \
          nodejs \
          xz
        pip3 install --root-user-action ignore \
          setuptools \
          pyyaml
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4 # required by upload-artifact / `act`
      # see: https://github.com/nektos/act/issues/973
    - name: create distribution package
      id: package
      run: |
        set -eu
        version=${{ needs.version.outputs.setuptools-version }}
        echo "version: ${version}"
        echo "${version}" | .ci/write-version-cfg-mgmt
        pkg_dir=dist
        mkdir -p ${pkg_dir}
        pkg_dir="$(readlink -f dist)"
        echo "pkgdir: ${pkg_dir}"
        path=setup.cfg_mgmt.py
        echo "building distribution package from ${path}"
        python3 ${path} \
          bdist_wheel \
          --dist-dir ${pkg_dir}
        set -x
        rm -rf build
        set +x
        echo "Built packages"

    - uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: dist/

  lint:
    runs-on: ubuntu-latest
    needs:
      - package
    container:
      image: python:3.12-alpine
    steps:
    - uses: actions/checkout@v4
    - name: Retrieve Distribution Packages
      uses: actions/download-artifact@v4
      with:
        name: distribution-packages
        path: /dist
    - name: lint
      run: |
        # debug
        which python
        which python3
        python3 --version
        echo "install dependencies for python-packages"
        if ! apk add --no-cache $(cat gardener-cicd-libs.apk-packages) >/tmp/apk.log; then
          echo "error while trying to install apk-packages:"
          cat /tmp/apk.log
          exit 1
        fi
        echo "installing linters"
        export CFLAGS='-Wno-int-conversion'
        if ! pip3 install --upgrade --break-system-packages \
          --find-links /dist \
          gardener-cicd-cfg-mgmt \
          bandit \
          flake8 \
          setuptools \
          pylama \
          pylint \
          > /tmp/pip3-install.log; then
          echo "error while trying to install packages:"
          cat /tmp/pip3-install.log
        fi

        echo "running linters"
        .ci/lint

  images:
    name: Build OCI Image
    needs:
      - version
      - package
      - params
    outputs:
      oci_image_ref: ${{ steps.image-build.outputs.image_reference }}
    runs-on: ubuntu-latest
    environment: build
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Retrieve Distribution Packages
        uses: actions/download-artifact@v4
        with:
          name: distribution-packages
          path: /tmp/dist

      - name: prepare build-filesystem
        id: prepare
        run: |
          cp -r /tmp/dist .
          ls -lta

          setuptools_version=${{ needs.version.outputs.setuptools-version }}
          # workaround: set repository-version to setuptools-version so installation of
          #             packages will succeed
          echo "${setuptools_version}" | .ci/write-version-cfg-mgmt

      - name: Authenticate against OCI-Registry
        uses: ./.github/actions/oci-auth
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
          oci-image-reference: ${{ needs.params.outputs.oci_repository }}

      - name: Build OCI Image (using ocm-oci-build-action)
        uses: ./.github/actions/ocm-oci-build
        id: image-build
        with:
          name: job-image-cfg-mgmt
          repository: ${{ needs.params.outputs.oci_repository }}/cicd/job-image-cfg-mgmt
          version: ${{ needs.version.outputs.version }}
          oci_platforms: ${{ needs.params.outputs.oci_platforms }}
          context: . # pass modified path rather than clean checkout
          dockerfile: Dockerfile.cfg-mgmt
